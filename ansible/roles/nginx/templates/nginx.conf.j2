# Nginx Load Balancer Configuration for URL Shortener
# Optimized for high-performance URL redirection and API load balancing

# Define upstream servers for the URL shortener application
upstream url_shortener_backend {
    # Use least_conn for better distribution with stateless app
    least_conn;
    
    # App servers - using private IPs from group_vars
    server {{ app_server_1_private_ip }}:8000 max_fails=3 fail_timeout=30s;
    server {{ app_server_2_private_ip }}:8000 max_fails=3 fail_timeout=30s;
    server {{ app_server_3_private_ip }}:8000 max_fails=3 fail_timeout=30s;
     
    # Keep connections alive for better performance
    keepalive 32;
}

# Rate limiting zones - tailored for URL shortener usage patterns
limit_req_zone $binary_remote_addr zone=api_create:10m rate=10r/m;     # URL creation - stricter
limit_req_zone $binary_remote_addr zone=api_general:10m rate=60r/m;    # General API calls
limit_req_zone $binary_remote_addr zone=redirects:10m rate=100r/s;     # URL redirects - high volume
limit_req_zone $binary_remote_addr zone=health:10m rate=10r/s;         # Health checks

# Connection limiting per IP
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

# Cache configuration for redirects (critical for URL shortener performance)
proxy_cache_path /var/cache/nginx/redirects levels=1:2 keys_zone=redirect_cache:10m max_size=100m inactive=60m use_temp_path=off;

# Custom log format for analytics
log_format url_shortener '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '$request_time $upstream_response_time '
                        '$upstream_addr "$request_id"';

server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Connection limits
    limit_conn conn_limit_per_ip 50;  # Higher for URL shortener traffic
    
    # Access logging with custom format
    access_log /var/log/nginx/url_shortener_access.log url_shortener;
    error_log /var/log/nginx/url_shortener_error.log warn;
    
    # Nginx health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "nginx-healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Debug endpoint to check upstream servers
    location /upstream-status {
        access_log off;
        return 200 "Upstream servers: {{ app_server_1_private_ip }}:8000, {{ app_server_2_private_ip }}:8000, {{ app_server_3_private_ip }}:8000\n";
        add_header Content-Type text/plain;
    }
    
    # Health check endpoint - minimal rate limiting
    # Use exact match (=) to ensure highest priority
    location = /health {
        limit_req zone=health burst=5 nodelay;
        
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Quick timeouts for health checks
        proxy_connect_timeout 2s;
        proxy_send_timeout 3s;
        proxy_read_timeout 3s;
        
        access_log off;
    }
    
    # Root API endpoint
    location = / {
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
    }
    
    # URL creation endpoint - strict rate limiting
    location /api/v1/create {
        limit_req zone=api_create burst=3 nodelay;
        
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Standard timeouts for API calls
        proxy_connect_timeout 5s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
        
        # Buffer settings for POST requests
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        client_max_body_size 1k;  # URLs shouldn't be huge
    }
    
    
    # Other API endpoints - moderate rate limiting (must be after specific Flower API endpoints)
    location /api/ {
        limit_req zone=api_general burst=10 nodelay;
        
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # URL redirects - the core functionality, optimized for performance
    # This location block handles both /key and /key/
    location ~ ^/([a-zA-Z0-9]{6,8})/?$ {
        # Internally rewrite the URL to remove the trailing slash, if present
        rewrite ^/([a-zA-Z0-9]{6,8})/?$ /$1 break;

        limit_req zone=redirects burst=20 nodelay;
        
        # Enable caching for redirects - critical for performance
        proxy_cache redirect_cache;
        proxy_cache_valid 200 302 5m;    # Cache successful redirects
        proxy_cache_valid 404 1m;        # Cache not found responses briefly
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        # Add cache status header for debugging
        add_header X-Cache-Status $upstream_cache_status;
        
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Optimized timeouts for redirects (should be very fast)
        proxy_connect_timeout 2s;
        proxy_send_timeout 3s;
        proxy_read_timeout 3s;
        
        # Don't buffer redirects
        proxy_buffering off;
    }
    
    # Flower monitoring - Complete proxy with sub-path handling
    location /flower/ {
        proxy_pass http://{{ hostvars['celery-flower']['ansible_host'] }}:5555/flower/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Critical: Rewrite Location headers for redirects
        proxy_redirect http://{{ hostvars['celery-flower']['ansible_host'] }}:5555/flower/ /flower/;
        proxy_redirect http://$host/ /flower/;
        
        # Handle WebSocket connections for real-time updates
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts for monitoring interface
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Disable buffering for real-time updates
        proxy_buffering off;
        proxy_cache off;
        
        # Handle CORS for AJAX requests
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range" always;
    }
    
    # Handle root flower redirect
    location = /flower {
        return 301 /flower/;
    }
    
    # Favicon handling
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        expires 7d;
        add_header Cache-Control "public, immutable";
        return 204;
    }
    
    # Robots.txt
    location = /robots.txt {
        access_log off;
        log_not_found off;
        return 200 "User-agent: *\nDisallow: /api/\nAllow: /\n";
        add_header Content-Type text/plain;
    }
    
    # Security: deny access to hidden files
    location ~ \/. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: deny access to backup files
    location ~ \.(bak|backup|swp|tmp)$ {
        deny all;
        access_log off;
    }
}

# Optional: HTTPS configuration (uncomment and configure for production)
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#     
#     ssl_certificate /path/to/certificate.pem;
#     ssl_certificate_key /path/to/private-key.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # Include the same location blocks as above
# }