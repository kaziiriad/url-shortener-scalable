version: '3.8'

services:
  # Nginx Load Balancer
  nginx_lb:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"  # For future HTTPS setup
    volumes:
      - ./nginx-lb.conf:/etc/nginx/conf.d/default.conf
      - nginx_cache:/var/cache/nginx
    networks:
      - url_shortener_network
    depends_on:
      - web_app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 5s
      retries: 3
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024

  # Application Instances (3 replicas)
  web_app:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    expose:
      - "8000"
    volumes:
      - .:/app
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - BASE_URL=http://localhost
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - DB_NAME=url_shortener
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=pgpassword
    networks:
      - url_shortener_network
    depends_on:
      - redis
      - mongo_db
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3

  # Redis - shared cache for all instances
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - url_shortener_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  # MongoDB
  mongo_db:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - url_shortener_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=pgpassword
      - POSTGRES_DB=url_shortener
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
    networks:
      - url_shortener_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Celery Worker - single instance for now, can be scaled
  celery_worker:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    command: uv run celery -A app.core.celery_app worker --loglevel=info --hostname=worker1 --queues=db_tasks,cleanup_tasks,celery --concurrency=4
    volumes:
      - .:/app
    environment:
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - DB_NAME=url_shortener
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=pgpassword
      - KEY_POPULATION_COUNT=50
    networks:
      - url_shortener_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Celery Beat - scheduler
  celery_beat:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    command: uv run celery -A app.core.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    volumes:
      - .:/app
      - celery_beat_data:/tmp
    environment:
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - DB_NAME=url_shortener
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=pgpassword
      - KEY_POPULATION_COUNT=50
      - KEY_POPULATION_SCHEDULE=300
    networks:
      - url_shortener_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  celery_flower:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    ports:
      - "5555:5555"
    command: uv run celery -A app.core.celery_app flower --port=5555 --url_prefix=flower --loglevel=info --auto_refresh=True --enable_events=True
    volumes:
      - .:/app
    environment:
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - CELERY_BROKER_URL=redis://redis:6379/1  # Add this for clarity
    networks:
      - url_shortener_network
    depends_on:
      - redis
    restart: unless-stopped
    
networks:
  url_shortener_network:
    driver: bridge

volumes:
  mongo_data:
  redis_data:
  postgres_data:
  celery_beat_data:
  nginx_cache:
