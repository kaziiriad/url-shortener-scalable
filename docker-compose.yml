version: '3.8'

services:
  # Nginx Load Balancer
  nginx_lb:
    image: nginx:alpine
    container_name: url_shortener_nginx_lb
    ports:
      - "80:80"
      - "443:443"  # For future HTTPS setup
    volumes:
      - ./nginx-lb.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - url_shortener_network
    depends_on:
      web_app:
        condition: service_healthy
      celery_flower:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    labels:
      - "com.url-shortener.service=load-balancer"

  # Application Instances (3 replicas)
  web_app:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    expose:
      - "8000"
    volumes:
      - .:/app
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - BASE_URL=http://localhost
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - DB_NAME=url_shortener
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=pgpassword
      # Connection pool settings (critical for distributed setup)
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      - MONGO_MAX_POOL_SIZE=50
      - MONGO_MIN_POOL_SIZE=10
      - REDIS_MAX_CONNECTIONS=50
      # Instance identification for monitoring
      - INSTANCE_ID=${HOSTNAME:-unknown}
      # Number of instances for capacity planning
      - NUM_FASTAPI_INSTANCES=3
      - NUM_CELERY_WORKERS=1
    networks:
      - url_shortener_network
    depends_on:
      redis:
        condition: service_healthy
      mongo_db:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    labels:
      - "com.url-shortener.service=api"

  # Redis - shared cache for all instances
  redis:
    image: redis:7-alpine
    container_name: url_shortener_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - url_shortener_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --tcp-keepalive 60
      --timeout 300
    labels:
      - "com.url-shortener.service=cache"

  # MongoDB
  mongo_db:
    image: mongo:6.0
    container_name: url_shortener_mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - url_shortener_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    environment:
      - MONGO_INITDB_DATABASE=url_shortener
    command: >
      mongod
      --wiredTigerCacheSizeGB 0.5
      --maxConns 200
    labels:
      - "com.url-shortener.service=document-db"

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: url_shortener_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=pgpassword
      - POSTGRES_DB=url_shortener
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
      # Critical: Set max_connections based on capacity planning
      # (3 FastAPI * 30 conns) + (1 Celery * 30 conns) + 20% buffer = ~150
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_WORK_MEM=4MB
    networks:
      - url_shortener_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c wal_buffers=16MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    labels:
      - "com.url-shortener.service=relational-db"

  # Celery Worker - single instance for now, can be scaled
  celery_worker:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    container_name: url_shortener_celery_worker
    command: uv run celery -A app.core.celery_app worker --loglevel=info --hostname=worker1@%h --queues=db_tasks,cleanup_tasks,celery --concurrency=4
    volumes:
      - .:/app
    environment:
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - DB_NAME=url_shortener
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=pgpassword
      - KEY_POPULATION_COUNT=50
      # Celery-specific connection pool settings
      - CELERY_DB_POOL_SIZE=20
      - CELERY_DB_MAX_OVERFLOW=10
      - CELERY_CONCURRENCY=4
      - MONGO_MAX_POOL_SIZE=50
    networks:
      - url_shortener_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping", "-d", "worker1@$$HOSTNAME"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    labels:
      - "com.url-shortener.service=background-worker"

  # Celery Beat - scheduler
  celery_beat:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    container_name: url_shortener_celery_beat
    command: uv run celery -A app.core.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule --pidfile=/tmp/celerybeat.pid
    volumes:
      - .:/app
      - celery_beat_data:/tmp
    environment:
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - DB_NAME=url_shortener
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=pgpassword
      - KEY_POPULATION_COUNT=50
      - KEY_POPULATION_SCHEDULE=300
    networks:
      - url_shortener_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    labels:
      - "com.url-shortener.service=scheduler"

  # Celery Flower - monitoring dashboard
  celery_flower:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    container_name: url_shortener_celery_flower
    command: uv run celery -A app.core.celery_app flower --port=5555 --loglevel=info --auto_refresh=True --enable_events=True --basic_auth=admin:admin123
    expose:
      - "5555"
    volumes:
      - .:/app
    environment:
      - MONGO_URI=mongodb://mongo_db:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_BASIC_AUTH=admin:admin123
    networks:
      - url_shortener_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "--user=admin", "--password=admin123", "http://localhost:5555/"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.url-shortener.service=monitoring"
    
networks:
  url_shortener_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  celery_beat_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local